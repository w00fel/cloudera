#
# Cluster name
#
name: CDH-Cluster-AWS

#
# Cloud provider configuration
#
provider {
    type: aws
    associatePublicIpAddresses: true
    rootVolumeSizeGB: 50

    region: {{region}}
    subnetId: {{subnet}}
    securityGroupsIds: {{securityGroup}}
}

#
# SSH credentials to use to connect to the cluster instances
#
ssh {
    username: ec2-user
    privateKey: /home/ubuntu/.ssh/id_rsa
}

#
# A list of instance types to use for group of nodes or management services
#
instances {
    manager {
        type: {{managerType}}
        image: {{clusterImage}}
        iamProfileName: {{nodeProfile}}

        bootstrapScriptPath: /home/ubuntu/route53.sh
    }

    master {
        type: {{masterType}}
        image: {{clusterImage}}
        iamProfileName: {{nodeProfile}}

        bootstrapScriptPath: /home/ubuntu/route53.sh
    }

    worker {
        type: {{workerType}}
        image: {{clusterImage}}
        iamProfileName: {{nodeProfile}}

        bootstrapScriptPath: /home/ubuntu/route53.sh
    }
}

#
# Configuration for Cloudera Manager
#
cloudera-manager {
    instance: ${instances.manager} {
        tags {
            Name: "CDH Manager ({{stack}})"
            group: manager
        }
    }

    #
    # There are three mutually exclusive options for setting up Cloudera Manager's license.
    # 1. License text may be embedded in this file using the "license" field. Triple quotes (""")
    #    are recommended for including multi-line text strings.
    # 2. The "licensePath" can be used to specify the path to a file containing the license.
    # 3. The "enableEnterpriseTrial" flag indicates whether the 60-Day Cloudera Enterprise Trial
    #    should be activated when no license is present. This must not be set to true if a
    #    license is included using either "license" or "licensePath".

    #
    # Embed a license for Cloudera Manager
    #
    # license: """
    #   -----BEGIN PGP SIGNED MESSAGE-----
    #   Hash: SHA1
    #
    # {
    #   "version"        : 1,
    #   "name"           : "License Owner",
    #   "uuid"           : "license id",
    #   "expirationDate" : 0,
    #   "features"       : [ "FEATURE1", "FEATURE2" ]
    # }
    # -----BEGIN PGP SIGNATURE-----
    # Version: GnuPG v1.4.11 (GNU/Linux)
    #
    # PGP SIGNATURE
    # -----END PGP SIGNATURE-----
    # """

    #
    # Include a license for Cloudera Manager from an external file
    #
    # licensePath: "/path/to/license.txt.asc"

    #
    # Activate 60-Day Cloudera Enterprise Trial
    #
    enableEnterpriseTrial: true

    # Install the unlimited strength JCE policy files for higher levels of encryption.
    # Prior to setting this to true, confirm that you understand the legal ramifications
    # of using unlimited JCE policy files in your country.
    unlimitedJce: true

    # An administrative Kerberos account capable of creating principals on the KDC that
    # Cloudera Manager will be using. This will typically be in the format:
    #    Principal@YOUR.KDC.REALM
    krbAdminUsername: "root/admin@HADOOP"

    # The password for the administrative Kerberos account.
    krbAdminPassword: "admin"

    configs {
        CLOUDERA_MANAGER {
            # The type of KDC Cloudera Manager will be using. Valid values are "MIT KDC"
            # and "Active Directory"
            KDC_TYPE: "MIT KDC"

            # The KDC host name or IP address.
            KDC_HOST: "{{kdcHost}}"

            # The security realm that your KDC uses.
            SECURITY_REALM: "HADOOP"

            # Allow Cloudera Manager to deploy Kerberos configurations to hosts. This should
            # be set to true unless you have an alternate mechanism to generate or retrieve the
            # Kerberos configuration on your Cloudera Manager node instances.
            KRB_MANAGE_KRB5_CONF: true

            # The encryption types your KDC supports.
            KRB_ENC_TYPES: "aes256-cts arcfour-hmac des3-hmac-sha1 des-cbc-crc"
        }
    }
}

#
# Cluster description
#
cluster {
    products {
        CDH: 5
    }

    services: [HDFS, YARN, ZOOKEEPER]

    configs {
        HDFS {
            dfs_client_use_datanode_hostname: true
            dfs_namenode_acls_enabled: true
        }
    }

    masters-1 {
        count: 1

        instance: ${instances.master} {
            tags {
                Name: "CDH Service Master ({{stack}})"
                group: master
            }
        }

        roles {
            HDFS: [JOURNALNODE]
            YARN: [RESOURCEMANAGER, JOBHISTORY]
            ZOOKEEPER: [SERVER]
        }
    }

    masters-2 {
        count: 1

        instance: ${instances.master} {
            tags {
                Name: "CDH Primary Name Node ({{stack}})"
                group: primary
            }
        }

        roles {
            HDFS: [NAMENODE, JOURNALNODE]
            ZOOKEEPER: [SERVER]
        }
    }

    masters-3 {
        count: 1

        instance: ${instances.master} {
            tags {
                Name: "CDH Secondary Name Node ({{stack}})"
                group: secondary
            }
        }

        roles {
            HDFS: [SECONDARYNAMENODE, JOURNALNODE]
            ZOOKEEPER: [SERVER]
        }
    }

    workers {
        count: {{workerCount}}

        instance: ${instances.worker} {
            tags {
                Name: "CDH Worker Node ({{stack}})"
                group: worker
            }
        }

        roles {
            HDFS: [DATANODE]
            YARN: [NODEMANAGER]
        }
    }
}
